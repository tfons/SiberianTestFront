@page "/ciudadForm"
@page "/ciudadForm/{id:int}"

@using SiberianTestFront.Data
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager navigationManager

<h3>Crear/Editar Ciudad</h3>

<EditForm Model="@city" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid">

        <div class="form-group row">
            <label class="col-sm-3">Token, para fines de prueba</label>
            <div class="col-sm-12">
                <InputText class="form-control" @bind-Value="@token"></InputText>
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-3">Nombre Ciudad</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@city._nombre_ciudad"></InputText>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-sm-12">
                <button class="btn btn-primary" type="submit">Guardar</button>
            </div>
        </div>

    </div>
</EditForm>

@code {

    [Parameter]
    public int id { get; set; }

    Ciudad city = new Ciudad();

    string token;

    private async Task Guardar()
    {
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        if (id != 0)
        {
            object result = await Http.PutAsJsonAsync<Ciudad>("/api/ciudad/update", city);
        }
        else
        {
            object result = await Http.PostAsJsonAsync<Ciudad>("/api/ciudad/insert", city);

        }


        navigationManager.NavigateTo("/ciudades");
    }

    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            List<Ciudad> cities = await Http.GetFromJsonAsync<List<Ciudad>>("/api/ciudad/buscar/" + id);

            city = cities[0];
        }

    }
}
